/*
 * Auto generated by code_generator
 * Please do not modify it.
 */
package client

import (
	//"github.com/astaxie/beego"
	"github.com/golang/protobuf/proto"
	"showgirl/models/utils"
)

type RecommendClient struct {
	CommonClient
}


func (this *RecommendClient) QueryRecommendList(hdr *STUserTrustInfo, req *STQueryRecommendListReq, header map[string]string) (*STRspHeader, *STQueryRecommendListRsp, error) {

	utils.Debug(hdr.GetFlowId(), "RecommendClient QueryRecommendList Request debug, reqHeader = %s, reqInfo = %s", hdr.String(), req.String())

	reqData, err := proto.Marshal(req)
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_MARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	commReq := &CommonReq {
		UserTrustInfo: hdr,
		ReqInfo      : reqData,
	}

	data, err := proto.Marshal(commReq)
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_MARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	body, err := this.Call("Recommend", "/Recommend/QueryRecommendList", data, header, hdr.GetFlowId())
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_CALL_FAILED_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	commonRes := &CommonRsp{}

	bodyLen := len(body)
	utils.Debug(hdr.GetFlowId(), "client Request Recommend QueryRecommendList bodyLen = %d, body = %x", bodyLen, body)

	err = proto.Unmarshal(body, commonRes)
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_UNMARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	rspHeader := commonRes.RspHeader

	rspInfo := &STQueryRecommendListRsp{}
	if len(commonRes.RspInfo) > 0{
		err = proto.Unmarshal(commonRes.RspInfo, rspInfo)
		if err != nil {
			utils.Warn(hdr.GetFlowId(), RPC_UNMARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
			return nil, nil, err
		}
	}
	
	utils.Debug(hdr.GetFlowId(), "RecommendClient QueryRecommendList Response debug, rspHeader = %s, rspInfo = %s", rspHeader.String(), rspInfo.String())

	return rspHeader, rspInfo, nil
}

func (this *RecommendClient) StyleImageList(hdr *STUserTrustInfo, req *STStyleImageListReq, header map[string]string) (*STRspHeader, *STStyleImageListRsp, error) {

	utils.Debug(hdr.GetFlowId(), "RecommendClient StyleImageList Request debug, reqHeader = %s, reqInfo = %s", hdr.String(), req.String())

	reqData, err := proto.Marshal(req)
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_MARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	commReq := &CommonReq {
		UserTrustInfo: hdr,
		ReqInfo      : reqData,
	}

	data, err := proto.Marshal(commReq)
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_MARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	body, err := this.Call("Recommend", "/Recommend/StyleImageList", data, header, hdr.GetFlowId())
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_CALL_FAILED_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	commonRes := &CommonRsp{}

	bodyLen := len(body)
	utils.Debug(hdr.GetFlowId(), "client Request Recommend StyleImageList bodyLen = %d, body = %x", bodyLen, body)

	err = proto.Unmarshal(body, commonRes)
	if err != nil {
		utils.Warn(hdr.GetFlowId(), RPC_UNMARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
		return nil, nil, err
	}

	rspHeader := commonRes.RspHeader

	rspInfo := &STStyleImageListRsp{}
	if len(commonRes.RspInfo) > 0{
		err = proto.Unmarshal(commonRes.RspInfo, rspInfo)
		if err != nil {
			utils.Warn(hdr.GetFlowId(), RPC_UNMARSHAL_ABNORMAL_PREFIX+" = %s", err.Error())
			return nil, nil, err
		}
	}
	
	utils.Debug(hdr.GetFlowId(), "RecommendClient StyleImageList Response debug, rspHeader = %s, rspInfo = %s", rspHeader.String(), rspInfo.String())

	return rspHeader, rspInfo, nil
}

