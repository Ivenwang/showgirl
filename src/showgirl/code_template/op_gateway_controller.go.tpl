/*
 * Auto generated by code_generator
 * Please do not modify it.
 */
package controllers

import (
	"encoding/json"
	"fmt"
	"github.com/astaxie/beego"
	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"showgirl/models/utils"
	"showgirl/{{.pkg}}"
	"runtime/debug"
	"strconv"
	"strings"
)

func init() {

}

type OpGatewayReq struct{
	UserTrustInfo *{{$.pkg}}.STUserTrustInfo `json:"header"`
	ReqBody interface{} `json:"body"`
}

type OpGatewayRsp struct{
	RspHeader *{{$.pkg}}.STRspHeader `json:"RspHeader"`
	RspJson interface{} `json:"RspJson"`
} 

type OpGatewayController struct {
	beego.Controller
}

func (this *OpGatewayController) DoResponse(clientRspPB *OpGatewayRsp, flowid int64) {
	
	clientRspPB.RspHeader.FlowId = proto.Int64(int64(flowid))
	clientRspBytes, err := json.Marshal(clientRspPB)
	if err != nil {
		errStr := fmt.Sprintf("pb2json failed, err:%s", err)
		utils.Warn(flowid, "%s", errStr)
		errNo := *clientRspPB.RspHeader.ErrNo
		errMsg := *clientRspPB.RspHeader.ErrMsg
		if *clientRspPB.RspHeader.ErrNo == {{$.pkg}}.EErrorTypeDef_RESULT_OK {
			errNo = {{$.pkg}}.EErrorTypeDef_GENERATE_CONTENT_ERROR
			errMsg = errStr
		}
		jsonString := fmt.Sprintf("{\"RspHeader\":{\"ErrNo\":%d, \"ErrMsg\":\"%s\"}}", errNo, errMsg)
		this.Ctx.Output.Header("FlowId", fmt.Sprintf("%d", flowid))
		this.Ctx.Output.Header("Errno", fmt.Sprintf("%d",errNo))
		this.Ctx.WriteString(jsonString)
		return
	}

	//返回json字符串
	this.Ctx.Output.Header("FlowId", fmt.Sprintf("%d", flowid))
	this.Ctx.Output.Header("Errno", fmt.Sprintf("%d",clientRspPB.RspHeader.GetErrNo()))
	this.Ctx.Output.Header("Content-Type", "application/json; charset=utf-8")

	this.Ctx.WriteString(string(clientRspBytes))
	return
}

func (this *OpGatewayController) parseRequest(method string, clientRspPB *OpGatewayRsp, reqPB proto.Message, flowid *int64) *{{$.pkg}}.STUserTrustInfo {
	body := this.Ctx.Input.RequestBody
	bodyLen := len(body)
	utils.Debug(*flowid, "OpGatewayRequest method:%s, bodyLen:%d, body:%s", method, bodyLen, body)
	if bodyLen == 0 {
		utils.Warn(*flowid, "OpGatewayController_request_body_empty method:%s", method)
		clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_CONTENT_ERROR.Enum()
		clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CLIENT_EXCEPTION)
		panic("OpGatewayController_request_body_empty")
	}
	
	err := jsonpb.UnmarshalString(string(body[:len(body)]), reqPB)
	if err != nil {
		if !(strings.HasPrefix(err.Error(), "unknown field")) {
			utils.Warn(*flowid, "ReqBody_Unmarshal_error, method=%s, err=%s", method, err.Error())
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_CONTENT_ERROR.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CLIENT_EXCEPTION)
			panic(err.Error())
		}
	}

	userTrustInfoHdr := this.Ctx.Input.Header("UserTrustInfo")
	length := len(userTrustInfoHdr)
	utils.Debug(*flowid, "OpGatewayRequest method:%s, UserTrustInfo:%s", method, userTrustInfoHdr)
	if length == 0 {
		utils.Warn(*flowid, "OpGatewayController_UserTrustInfo_header_empty method:%s", method)
		clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_CONTENT_ERROR.Enum()
		clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CLIENT_EXCEPTION)
		panic("OpGatewayController_UserTrustInfo_header_empty")
	}
	
	userTrustInfo := &{{$.pkg}}.STUserTrustInfo{}
	err = jsonpb.UnmarshalString(userTrustInfoHdr, userTrustInfo)
	if err != nil {
		utils.Warn(*flowid, "UserTrustInfo_Unmarshal_error, method=%s, err=%s", method, err.Error())
		clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_CONTENT_ERROR.Enum()
		clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CLIENT_EXCEPTION)
		panic(err.Error())
	}
	
	if *flowid == 0 {
		*flowid = userTrustInfo.GetFlowId()
	}
	
	return userTrustInfo
}

func (this *OpGatewayController) fillResponce(method string, clientRspPB *OpGatewayRsp,
	rspHdr *{{$.pkg}}.STRspHeader, rspBody interface{}, err error, flowid int64){
	if err != nil {
		if strings.HasPrefix(err.Error(), {{$.pkg}}.RPC_UNMARSHAL_ABNORMAL_PREFIX) ||
		 	strings.HasPrefix(err.Error(), {{$.pkg}}.RPC_MARSHAL_ABNORMAL_PREFIX) {
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_RPC_INTERFACE_ABNORMAL.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_EXCEPTION_CATCHED)
		} else {
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_RPC_FAILED_ERROR.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_SYSTEM_BUSY)
		}
		errStr := fmt.Sprintf("rpc_failed, method:%s, err:%s", method, err)
		utils.Warn(flowid, "%s", errStr)
		clientRspPB.RspHeader.ErrDetail = proto.String(errStr)
		panic(err.Error())
	}
	
	clientRspPB.RspJson = rspBody
	clientRspPB.RspHeader = rspHdr
	
	utils.Debug(flowid, "OpGatewayResponce method:%s, header:%v | rspBody:%v", method, rspHdr, rspBody)
}

func newOpGatewayRsp() *OpGatewayRsp {
	return &OpGatewayRsp {
		RspHeader: &{{$.pkg}}.STRspHeader {
			ErrNo:  {{$.pkg}}.EErrorTypeDef_RESULT_OK.Enum(),
			ErrMsg: proto.String("success"),
		},
		RspJson: nil,
	}
}

func newJsonMarshaler() *jsonpb.Marshaler {
	return &jsonpb.Marshaler{
		EnumsAsInts: true,  //整数是否整形显示		
		EmitDefaults: true, //是否显示值为0的字段		
		OrigName: false,    //是否显示proto名字
	}
}

func handlePanic(method string, clientRspPB *OpGatewayRsp, err interface{}, flowid int64) {
	utils.Warn(flowid, "Panic_catched, method:%s, err:%v, stack:%s", method, err, string(debug.Stack()))
	if clientRspPB.RspHeader.GetErrNo() == {{$.pkg}}.EErrorTypeDef_RESULT_OK {
		clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_PROGRAM_EXCEPTION_ERROR.Enum()
		clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_EXCEPTION_CATCHED)
	}
	clientRspPB.RspHeader.ErrDetail = proto.String(fmt.Sprintf("%v", err))
}

{{range $module, $methods := .modules}}{{range $key, $method := $methods}}
func (this *OpGatewayController) {{$module}}_{{$method}}() {
	clientRspPB := newOpGatewayRsp()
	tmp, _ := strconv.Atoi(this.Ctx.Input.Header("FlowId"))
	flowid := int64(tmp)	
	defer func() {
		if err := recover(); err != nil {
			handlePanic("{{$method}}", clientRspPB, err, flowid)
		}
		this.DoResponse(clientRspPB, flowid)
	}()
	
	reqPB := &{{$.pkg}}.ST{{$method}}Req{}
	userTrustInfo := this.parseRequest("{{$method}}", clientRspPB, reqPB, &flowid)
	
	c := {{$.pkg}}.{{$module}}Client{}
	rspHdr, rspBody, err := c.{{$method}}(userTrustInfo, reqPB, make(map[string]string))
	this.fillResponce("{{$method}}", clientRspPB, rspHdr, rspBody, err, flowid)
}
{{end}}{{end}}
