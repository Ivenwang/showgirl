/*
 * Auto generated by code_generator
 * Please do not modify it.
 */
package controllers

import (
	//"bytes"
	//"compress/gzip"
	//"crypto/md5"
	//"encoding/base64"
	//"encoding/hex"
	"encoding/json"
	//"crypto/hmac"
	//"crypto/sha1"
	"fmt"
	//"github.com/astaxie/beego"
	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	//dproxy "github.com/koron/go-dproxy"
	//"io/ioutil"
	//"math/rand"
	"showgirl/models/utils"
	//"time"
	"showgirl/{{.pkg}}"
	//"showgirl/models/redis"
	//"runtime/debug"
	"strconv"
	"strings"
	"net/url"
)


{{range $module, $methods := .publics}}
{{range $key, $v := $methods}}
func (this *GoFrontController) {{$module}}_{{$v.MethodName}}() {
	jsonMarshaler := &jsonpb.Marshaler{
		EnumsAsInts: true,  //整数是否整形显示		
		EmitDefaults: true, //是否显示值为0的字段		
		OrigName: false,    //是否显示proto名字
	}

	clientRspPB := &{{$.pkg}}.CommonClientRsp {
		RspHeader: &{{$.pkg}}.STRspHeader {
			ErrNo:  {{$.pkg}}.EErrorTypeDef_RESULT_OK.Enum(),
			ErrMsg: proto.String("success"),
		},
		RspJson: nil,
	}
	FlowIdHeader, _ := strconv.ParseInt(this.Ctx.Input.Header("FlowId"), 10, 64)
	if FlowIdHeader == 0 {
		FlowIdHeader = int64(G_FlowRand.Int31())
	}
	flowid := int64(FlowIdHeader)
	
	defer func() {
		this.DoResponse(jsonMarshaler, clientRspPB, FlowIdHeader)
	}()

	for {
		body := this.Ctx.Input.RequestBody
		bodyLen := len(body)
		utils.Debug(flowid, "GoFront Request {{$v.MethodName}} bodyLen: %d", bodyLen)
		if bodyLen == 0 {
			utils.Warn(flowid, "GoFrontController post check failed, body is empty")
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_CONTENT_ERROR.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CLIENT_EXCEPTION)
			break
		}
		{{if $v.CookieIsNeeded }}
		//普通Public接口，取出并验证cookie
		cookie := this.Ctx.Input.Header("UserKey")
		//如果从userkey没找到cookie,就从cookie里拿
		if len(cookie) == 0 {
			TmpUserJson := this.Ctx.GetCookie("UserInfo")
			if len(TmpUserJson) > 0 {
				TmpUserInfo, _ := url.QueryUnescape(TmpUserJson)
				stCookieUserInfo := &CookieUserInfo{}
				err := json.Unmarshal([]byte(TmpUserInfo), stCookieUserInfo)
				if err != nil {
					utils.Warn(flowid, "Cookie.UserInfo_Unmarshal_error, method={{$v.MethodName}}  UserInfo=%v, err=%s", TmpUserInfo, err.Error())
				}
				utils.Debug(flowid, "GoFront Request {{$v.MethodName}} debug, CookieUserInfo = %v, TmpUserInfo = %s", stCookieUserInfo, TmpUserInfo)
				cookie = stCookieUserInfo.UserKey
			}
		}
		
		utils.Debug(flowid, "go front get cookie, cookie = %s", cookie)
		//redis中取cookie对应的信息
		TrustInfo, ret := getCookieData(this.Ctx.Request.URL.RequestURI(), cookie, flowid)
		
		if ret == 1 || ret == 2 {
			utils.Warn(flowid, "Check_cookie_failed, cookie=%s, ret=%d", cookie, ret)
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_COOKIE_ERROR.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CHECK_COOKIE_ERROR)
			break
		} else if ret == 3 {
			utils.Warn(flowid, "getCookieData_from_redis_failed, cookie=%s, ret=%d", cookie, ret)
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_SYS_INTERNAL_ERROR.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_SYSTEM_BUSY)
			clientRspPB.RspHeader.ErrDetail = proto.String("getCookieData from redis failed")
			break
		}
		
		channel := this.Ctx.Input.Header("Channel")
		utils.Debug(flowid, "stat_channel UserID = %s, Url = %s, NickName = %s", 
			channel, TrustInfo.GetUserID(), TrustInfo.GetUrl(), TrustInfo.GetName())
		{{else}}
		//构造空cookie信息
		TrustInfo := &{{$.pkg}}.STUserTrustInfo{
			UserID: proto.String(""),
			Url: proto.String(""),
			Name: proto.String(""),
			FlowId: proto.Int64(flowid),
		}
		{{end}}
		//打印请求json
		utils.Debug(flowid, "{{$module}}_{{$v.MethodName}} req json data = %s", body)
		
		//JSON转PB
		reqPB := &{{$.pkg}}.ST{{$v.MethodName}}Req{}
		err := jsonpb.UnmarshalString(string(body[:len(body)]), reqPB)
		if err != nil {
			errStr := fmt.Sprintf("parse body to ST{{$v.MethodName}}Req failed, err:%s", err)
			utils.Warn(flowid, "%s", errStr)
			//example:unknown field "AdditionalReq" in STQueryUserAttrReq
			//if !(strings.HasPrefix(err.Error(), "unknown field") && 
			//	strings.HasSuffix(err.Error(), "in {{$.pkg}}.ST{{$v.MethodName}}Req")) {
			if !(strings.HasPrefix(err.Error(), "unknown field")) {
				clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_CHECK_CONTENT_ERROR.Enum()
				clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_CLIENT_EXCEPTION)
				clientRspPB.RspHeader.ErrDetail = proto.String(errStr)
				break
			}
		}

		//设置httpheader
		header := make(map[string]string)
		header["FlowId"] = this.Ctx.Input.Header("FlowId")
		
		utils.Debug(int64(FlowIdHeader), "GoFront Transmit {{$v.MethodName}} TrustInfo: %s | reqPB: %s | reqJson: %s", 
			TrustInfo.String(), reqPB.String(), body)

		c :=  {{$.pkg}}.{{$module}}Client{}
		rspHdr, rspBody, err := c.{{$v.MethodName}}(TrustInfo, reqPB, header)
		if err != nil {
			if strings.HasPrefix(err.Error(), {{$.pkg}}.RPC_UNMARSHAL_ABNORMAL_PREFIX) ||
			 	strings.HasPrefix(err.Error(), {{$.pkg}}.RPC_MARSHAL_ABNORMAL_PREFIX) {
				clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_RPC_INTERFACE_ABNORMAL.Enum()
				clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_EXCEPTION_CATCHED)
			} else {
				clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_RPC_FAILED_ERROR.Enum()
				clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_SYSTEM_BUSY)
			}
			errStr := fmt.Sprintf("rpc {{$v.MethodName}} failed, err:%s", err)
			utils.Warn(flowid, "%s", errStr)
			clientRspPB.RspHeader.ErrDetail = proto.String(errStr)
			break
		}

		//rspBody转json
		rspBodyJson, err := jsonMarshaler.MarshalToString(rspBody)
		if err != nil {
			errStr := fmt.Sprintf("pb2json failed, err:%s", err)
			utils.Warn(flowid, "%s", errStr)
			clientRspPB.RspHeader.ErrNo = {{$.pkg}}.EErrorTypeDef_GENERATE_CONTENT_ERROR.Enum()
			clientRspPB.RspHeader.ErrMsg = proto.String(utils.ERRMSG_EXCEPTION_CATCHED)
			clientRspPB.RspHeader.ErrDetail = proto.String(errStr)
			break
		}

		//转json
		clientRspPB.RspJson = &rspBodyJson
		clientRspPB.RspHeader = rspHdr
		
		utils.Debug(int64(FlowIdHeader), "GoFront Transmit rsp {{$v.MethodName}} header:%s | rspPB:%s", rspHdr.String(), rspBodyJson)
		
		break
	}
}
{{end}}
{{end}}
